<?php

namespace backend\models;


use backend\modules\system\models\Log;
use Yii;
use yii\web\UnauthorizedHttpException;

/**
 * Created by PhpStorm.
 * User: moment
 * Date: 2018/6/7
 * Time: 下午5:03
 */
class BaseModel extends  Repository
{

    public function model()
    {
        return self::name();
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
//        $admin = new Admin();
//        if($admin->is_password){return true;}
//        var_dump($insert);die;
        if($insert) {
            $data = $this->attributes;
            $index = Yii::$app->request->post();
            Log::create(Log::TYPE_CREATE,$data,$index);
        } else {
            $data = $this->attributes;
            $index = Yii::$app->request->post();
            Log::create(Log::TYPE_UPDATE,$data,$index);
        }
    }

    /**
     * 删除操作必须是管理员以上级别
     * @return bool
     */
    public function beforeDelete()
    {
        parent::beforeDelete(); // TODO: Change the autogenerated stub
        $role = Yii::$app->authManager->getRolesByUser(Yii::$app->user->id);
        foreach ($role as $k => $v){
            if(($k == 'admin' || $k == 'administrator')){
                return true;
            }else{
                $this->addError('username', '暂无权限');
                return false;
            }
        }
    }

    public function afterDelete()
    {
        parent::afterDelete();
        $index = Yii::$app->request->post('id');
        $data = Yii::$app->request->post();
        Log::create(Log::TYPE_DELETE,$data,$index);
    }


    public function __construct()
    {
        return get_class($this);
    }


    static function name()
    {
        return get_called_class();
    }

    //判断类是否为真
    public function getModelNameFormType($type)
    {
        if ($type == self::name()) {
            return true;
        }else{
            return false;
        }

    }
    public static function getModelError($model) {
        $errors = $model->getErrors();    //得到所有的错误信息
        if(!is_array($errors)){
            return '';
        }
        $firstError = array_shift($errors);
        if(!is_array($firstError)){
            return '';
        }
        return array_shift($firstError);
    }
    // 返回指定列的数据
    public  function backColumnModel($id,$column,$is_array = false)
    {
        $model = $this->name();
        $model = new $model();
        $model = $model->findOne(['id'=>$id]);
        if ($model !== null){
            $arr = self::getColumn();
            if ($is_array) {
                $item = [];
                foreach ($column as $v) {
                    if (in_array($v, $arr)) {
                        $item[$v] = $model->$v;
                    } else {
                        $item[$v] = 'no column';
                    }
                }
                return $item;
            }else{
                if (in_array($column, $arr)) {
                    return $model->$column;
                } else {
                    throw new UnauthorizedHttpException('no column');
                }
            }
        }
        throw new UnauthorizedHttpException('居然没...');
    }

}
